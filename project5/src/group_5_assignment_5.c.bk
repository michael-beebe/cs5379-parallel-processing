#include <stdio.h>
#include <mpi.h>
#include <math.h>

#define c1 1.0
#define c2 1.0

// Function to calculate the sign of a number
int sgn(double val) {
  return (0 < val) - (val < 0);
}

// Parallel force calculation
void calc_force_parallel(int n, double *x, double *f, int rank, int size) {
  int local_n = n / size; // Number of particles per processor
  int extra_n = n % size; // Extra particles to be distributed
  int start = rank * local_n + (rank < extra_n ? rank : extra_n);
  int end = start + local_n + (rank < extra_n ? 1 : 0);
  double external_x[n]; // Buffer for external particles
  int i, j;
  double diff, tmp;

  // Initialize local force array
  for (i = 0; i < n; i++) f[i] = 0.0;

  // Local force calculation
  for (i = start; i < end; i++) {
    for (j = 0; j < i; j++) {
      diff = x[i] - x[j];
      tmp = c1 / (diff * diff * diff) - c2 * sgn(diff) / (diff * diff);
      f[i] += tmp;
      f[j] -= tmp;
    }
  }

  // Global interaction calculation
  for (int step = 1; step < size; step *= 2) {
    int partner = (rank + step) % size;
    MPI_Sendrecv(x, n, MPI_DOUBLE, partner, 0,
                 external_x, n, MPI_DOUBLE, partner, 0,
                 MPI_COMM_WORLD, MPI_STATUS_IGNORE);

    // Compute forces due to external particles
    for (i = start; i < end; i++) {
      for (j = 0; j < n; j++) {
        if (j >= start && j < end) continue; // Skip local particles
        diff = x[i] - external_x[j];
        tmp = c1 / (diff * diff * diff) - c2 * sgn(diff) / (diff * diff);
        f[i] += tmp;
      }
    }
  }

  // Gather forces at root (optional)
  MPI_Gather(f, n, MPI_DOUBLE, f, n, MPI_DOUBLE, 0, MPI_COMM_WORLD);
}

int main(int argc, char** argv) {
  MPI_Init(&argc, &argv);

  int rank, size;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  MPI_Comm_size(MPI_COMM_WORLD, &size);

  // Assuming n and x are defined and initialized
  int n = 100; // Number of particles
  double x[n], f[n];

  // Initialize x here or read from input

  calc_force_parallel(n, x, f, rank, size);

  // Final results in f
  // Print the forces computed by this processor
  printf("Processor %d computed forces:\n", rank);
  for (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {
    printf("f[%d] = %f\n", i, f[i]);
  }

  MPI_Finalize();
  return 0;
}
